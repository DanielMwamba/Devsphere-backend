// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  userName        String    @unique
  email           String    @unique
  bio             String    @default("")
  password        String
  profileImageURL String
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  followers       Follow[] @relation("UserFollowers")
  following       Follow[] @relation("UserFollowing")
  accessTokens    AccessToken[]
  refreshTokens   RefreshToken[]
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  category     String
  summary      String
  description  String
  slug         String    @unique
  date         String
  imageURL     String
  cloudinaryId String
  authorId     Int
  author       User      @relation(fields: [authorId], references: [id])
  comments     Comment[]
  likes        Like[]
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  date     String
  authorId Int
  postId   Int
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])
}

model Like {
  id       Int    @id @default(autoincrement())
  userId   Int
  postId   Int
  user     User   @relation(fields: [userId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  id             Int    @id @default(autoincrement())
  followerId     Int
  followingId    Int
  follower       User   @relation("UserFollowers", fields: [followerId], references: [id])
  following      User   @relation("UserFollowing", fields: [followingId], references: [id])
}

model Client {
  id           Int       @id @default(autoincrement())
  clientId     String    @unique
  clientSecret String
  redirectUris String[]
  grants       String[]
  accessTokens AccessToken[]
  refreshTokens RefreshToken[] 
}

model AccessToken {
  id               Int      @id @default(autoincrement())
  accessToken      String   @unique
  accessTokenExpiresAt DateTime
  clientId         Int
  client           Client   @relation(fields: [clientId], references: [id])
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id                Int      @id @default(autoincrement())
  refreshToken      String   @unique
  refreshTokenExpiresAt DateTime
  clientId          Int
  client            Client   @relation(fields: [clientId], references: [id])
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
}
